<% if notice %>
  <div class="notice" style="background-color: #d4edda; color: #155724; padding: 10px; margin-bottom: 15px; border-radius: 4px;">
    <%= notice %>
  </div>
<% end %>

<h1>Washington Memorial Map</h1>

<div style="display: flex; gap: 20px;">
  <div id="map" style="width: 60%; height: 500px;"></div>
  
  <div id="entries-list" style="width: 40%; height: 500px; overflow-y: auto; padding: 10px; border: 1px solid #ddd; border-radius: 4px;">
    <h2>Memorial Entries</h2>
    <ul id="entries-list-items" style="list-style: none; padding: 0;">
      <!-- Entries will be populated by JavaScript -->
    </ul>
  </div>
</div>

<div style="margin-top: 15px;">
  <%= link_to "Add New Entry", new_map_entry_path, style: "display: inline-block; background-color: #4CAF50; color: white; padding: 8px 16px; text-decoration: none; border-radius: 4px;" %>
</div>

<link rel="stylesheet" href="https://unpkg.com/leaflet@1.9.4/dist/leaflet.css" />
<script src="https://unpkg.com/leaflet@1.9.4/dist/leaflet.js"></script>

<script>
  document.addEventListener('turbo:load', function() {
    initMap();
  });
  
  document.addEventListener('DOMContentLoaded', function() {
    initMap();
  });
  
  function initMap() {
    // Washington State boundaries (approximate)
    const waBounds = [
      [45.5, -124.8], // Southwest corner
      [49.0, -116.9]  // Northeast corner
    ];
    
    // Create map with fixed bounds
    const map = L.map('map', {
      maxBounds: [
        [44.5, -125.8], // Add some padding
        [50.0, -115.9]
      ],
      maxBoundsViscosity: 1.0 // Keep the map within bounds
    }).fitBounds(waBounds);
    
    // Set min/max zoom levels
    map.setMinZoom(6);
    map.setMaxZoom(13);
    
    L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {
      attribution: '&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
    }).addTo(map);
    
    const entriesList = document.getElementById('entries-list-items');
    
    // Fetch map entries from the server
    fetch('/map_entries.json')
      .then(response => {
        if (!response.ok) {
          throw new Error('Network response was not ok');
        }
        return response.json();
      })
      .then(entries => {
        console.log('Entries loaded:', entries);
        
        // Clear existing entries list
        entriesList.innerHTML = '';
        
        if (entries.length === 0) {
          entriesList.innerHTML = '<li style="padding: 10px;">No entries yet. Add your first memorial!</li>';
        }
        
        entries.forEach(entry => {
          // Create marker
          const marker = L.marker([entry.latitude, entry.longitude], {
            title: entry.title
          }).addTo(map)
            .bindPopup(`<b>${entry.title}</b><br>${entry.description}`);
          
          // Create list item
          const listItem = document.createElement('li');
          listItem.style.padding = '10px';
          listItem.style.borderBottom = '1px solid #eee';
          listItem.style.display = 'flex';
          listItem.style.justifyContent = 'space-between';
          listItem.style.alignItems = 'center';
          
          // Create content div for title and description
          const contentDiv = document.createElement('div');
          contentDiv.style.cursor = 'pointer';
          contentDiv.style.flexGrow = '1';
          contentDiv.innerHTML = `
            <div style="font-weight: bold;">${entry.title}</div>
            <div style="font-size: 0.9em; color: #666; margin-top: 5px;">${entry.description.substring(0, 100)}${entry.description.length > 100 ? '...' : ''}</div>
          `;
          
          // Create delete button
          const deleteButton = document.createElement('button');
          deleteButton.textContent = 'Delete';
          deleteButton.style.backgroundColor = '#dc3545';
          deleteButton.style.color = 'white';
          deleteButton.style.border = 'none';
          deleteButton.style.borderRadius = '4px';
          deleteButton.style.padding = '5px 10px';
          deleteButton.style.cursor = 'pointer';
          deleteButton.style.marginLeft = '10px';
          
          // Add delete functionality
        deleteButton.addEventListener('click', function(e) {
        e.stopPropagation(); // Prevent triggering the list item click
        
        if (confirm('Are you sure you want to delete this entry?')) {
            fetch(`/map_entries/${entry.id}`, {
            method: 'DELETE',
            headers: {
                'X-CSRF-Token': document.querySelector('meta[name="csrf-token"]').content,
                'Accept': 'application/json',
                'Content-Type': 'application/json'
            }
            })
            .then(response => {
            if (response.ok) {
                return response.json().catch(() => ({}));
            }
            throw new Error('Network response was not ok');
            })
            .then(() => {
            // Remove marker from map
            map.removeLayer(marker);
            
            // Remove list item
            listItem.remove();
            
            // Show success message
            const notice = document.createElement('div');
            notice.className = 'notice';
            notice.style.backgroundColor = '#d4edda';
            notice.style.color = '#155724';
            notice.style.padding = '10px';
            notice.style.marginBottom = '15px';
            notice.style.borderRadius = '4px';
            notice.textContent = 'Entry was successfully deleted.';
            
            document.querySelector('body').insertBefore(notice, document.querySelector('h1'));
            
            // Remove notice after 3 seconds
            setTimeout(() => {
                notice.remove();
            }, 3000);
            })
            .catch(error => {
            console.error('Error deleting entry:', error);
            alert('Error deleting entry.');
            });
        }
        });
          
          // Add hover effect to content div
          contentDiv.addEventListener('mouseenter', function() {
            listItem.style.backgroundColor = '#f5f5f5';
            
            // Highlight the marker
            marker.setZIndexOffset(1000);
            
            // Open the popup
            marker.openPopup();
            
            // Pan to the marker
            map.panTo(marker.getLatLng());
          });
          
          contentDiv.addEventListener('mouseleave', function() {
            listItem.style.backgroundColor = 'transparent';
            marker.setZIndexOffset(0);
            marker.closePopup();
          });
          
          // Click to zoom to the marker
          contentDiv.addEventListener('click', function() {
            map.setView(marker.getLatLng(), 10);
            marker.openPopup();
          });
          
          // Append elements to list item
          listItem.appendChild(contentDiv);
          listItem.appendChild(deleteButton);
          entriesList.appendChild(listItem);
        });
      })
      .catch(error => {
        console.error('Error loading map entries:', error);
        entriesList.innerHTML = '<li style="color: red; padding: 10px;">Error loading entries</li>';
      });
  }
</script>
